{"version":3,"sources":["webpack://webgpu01/./src/helper.ts","webpack://webgpu01/./src/main.ts","webpack://webgpu01/./src/shaders.ts","webpack://webgpu01/webpack/bootstrap","webpack://webgpu01/webpack/startup"],"names":["CheckWebGPU","result","navigator","gpu","checkgpu","includes","console","log","canvas","document","getElementById","adapter","requestAdapter","device","requestDevice","swapChainFormat","swapChain","getContext","configureSwapChain","format","shader","Shaders","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","commandEncoder","createCommandEncoder","textureView","getCurrentTexture","createView","renderPass","beginRenderPass","colorAttachments","view","loadValue","storeOp","setPipeline","draw","endPass","queue","submit","finish","Shaders1","ShadersOld","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","__webpack_modules__","call"],"mappings":"4GAAa,EAAAA,YAAc,KACvB,IAAIC,EAAS,+CAUb,OATSC,UAAUC,MACZF,EAAS,4hBAQTA,I,qYCXX,eACA,SAEmC,OAAD,6B,MAC9B,MAAMG,EAAW,EAAAJ,cACjB,GAAGI,EAASC,SAAS,iDAEjB,MADAC,QAAQC,IAAIH,GACP,gDAGT,MAAMI,EAASC,SAASC,eAAe,iBACjCC,QAA6B,QAAb,EAAAT,UAAUC,WAAG,eAAES,iBAC/BC,QAAeF,aAAO,EAAPA,EAASG,gBAExBC,EAAkB,aAClBC,EAFUR,EAAOS,WAAW,cAERC,mBAAmB,CACzCL,OAAQA,EACRM,OAAQJ,IAGNK,EAAS,EAAAC,UACTC,EAAWT,EAAOU,qBAAqB,CACzCC,OAAQ,CACJC,OAAQZ,EAAOa,mBAAmB,CAC9BC,KAAMP,EAAOI,SAEjBI,WAAY,QAEhBC,SAAU,CACNJ,OAAQZ,EAAOa,mBAAmB,CAC9BC,KAAMP,EAAOS,WAEjBD,WAAY,OACZE,QAAS,CAAC,CACNX,OAAQJ,KAGhBgB,UAAU,CACNC,SAAU,mBAIZC,EAAiBpB,EAAOqB,uBACxBC,EAAcnB,EAAUoB,oBAAoBC,aAC5CC,EAAaL,EAAeM,gBAAgB,CAC9CC,iBAAkB,CAAC,CACfC,KAAMN,EACNO,UAAW,CAAC,GAAK,GAAK,GAAK,GAC3BC,QAAS,YAGjBL,EAAWM,YAAYtB,GACvBgB,EAAWO,KAAK,EAAG,EAAG,EAAG,GACzBP,EAAWQ,UAEXjC,EAAOkC,MAAMC,OAAO,CAACf,EAAegB,e,sGCvD3B,EAAA5B,QAAU,KAkCZ,CAACG,OAjCO,m0BAiCCK,SANC,kKASR,EAAAqB,SAAW,KAkCb,CAAC1B,OAjCO,m0BAiCCK,SANC,kKAUR,EAAAsB,WAAa,KAoCf,CAAC3B,OAnCO,swBAmCCK,SAVC,wPCpGjBuB,EAA2B,IAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIhC,EAAS2B,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAC,EAAoBJ,GAAUK,KAAKlC,EAAOgC,QAAShC,EAAQA,EAAOgC,QAASJ,GAGpE5B,EAAOgC,QClBWJ,CAAoB,M","file":"main.bundle.js","sourcesContent":["export const CheckWebGPU = () => {\r\n    let result = 'Great, your current browser supports WebGPU!';\r\n        if (!navigator.gpu) {\r\n           result = `Your current browser does not support WebGPU! Make sure you are on a system \r\n                     with WebGPU enabled. Currently, SPIR-WebGPU is only supported in  \r\n                     <a href=\"https://www.google.com/chrome/canary/\">Chrome canary</a>\r\n                     with the flag \"enable-unsafe-webgpu\" enabled. See the \r\n                     <a href=\"https://github.com/gpuweb/gpuweb/wiki/Implementation-Status\"> \r\n                     Implementation Status</a> page for more details.                   \r\n                    `;\r\n        } \r\n    return result;\r\n}","import { CheckWebGPU } from './helper';\r\nimport { Shaders } from './shaders';\r\n\r\nconst CreateTriangle = async () => {\r\n    const checkgpu = CheckWebGPU();\r\n    if(checkgpu.includes('Your current browser does not support WebGPU!')){\r\n        console.log(checkgpu);\r\n        throw('Your current browser does not support WebGPU!');\r\n    }\r\n\r\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;        \r\n    const adapter = await navigator.gpu?.requestAdapter() as GPUAdapter;       \r\n    const device = await adapter?.requestDevice() as GPUDevice;\r\n    const context = canvas.getContext('gpupresent') as unknown as GPUCanvasContext;\r\n    const swapChainFormat = 'bgra8unorm';\r\n    const swapChain = context.configureSwapChain({\r\n        device: device,\r\n        format: swapChainFormat,\r\n    });\r\n    \r\n    const shader = Shaders();\r\n    const pipeline = device.createRenderPipeline({\r\n        vertex: {\r\n            module: device.createShaderModule({                    \r\n                code: shader.vertex\r\n            }),\r\n            entryPoint: \"main\"\r\n        },\r\n        fragment: {\r\n            module: device.createShaderModule({                    \r\n                code: shader.fragment\r\n            }),\r\n            entryPoint: \"main\",\r\n            targets: [{\r\n                format: swapChainFormat\r\n            }]\r\n        },\r\n        primitive:{\r\n            topology: \"triangle-list\"\r\n        } \r\n    });\r\n\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = swapChain.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({\r\n        colorAttachments: [{\r\n            view: textureView,\r\n            loadValue: [0.5, 0.5, 0.8, 1], //background color\r\n            storeOp: 'store'\r\n        }]\r\n    });\r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.draw(3, 1, 0, 0);\r\n    renderPass.endPass();\r\n\r\n    device.queue.submit([commandEncoder.finish()]);\r\n}\r\n\r\nCreateTriangle();\r\n\r\n\r\n\r\n\r\n","export const Shaders = () => {\r\n    const vertex = `\r\n        struct Output {\r\n            [[builtin(position)]] Position : vec4<f32>;\r\n            [[location(0)]] vColor : vec4<f32>;\r\n        };\r\n\r\n        [[stage(vertex)]]\r\n        fn main([[builtin(vertex_index)]] VertexIndex: u32) -> Output {\r\n            var pos = array<vec2<f32>, 3>(\r\n                vec2<f32>(0.0, 0.5),\r\n                vec2<f32>(-0.5, -0.5),\r\n                vec2<f32>(0.5, -0.5)\r\n            );\r\n    \r\n            var color = array<vec3<f32>, 3>(\r\n                vec3<f32>(1.0, 0.0, 0.0),\r\n                vec3<f32>(0.0, 1.0, 0.0),\r\n                vec3<f32>(0.0, 0.0, 1.0)\r\n            );\r\n\r\n            var output: Output;\r\n            output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\r\n            output.vColor = vec4<f32>(color[VertexIndex], 1.0);\r\n            return output;\r\n        }\r\n    `;\r\n\r\n    const fragment = `\r\n        [[stage(fragment)]]\r\n        fn main([[location(0)]] vColor: vec4<f32>) -> [[location(0)]] vec4<f32> {\r\n            return vColor;\r\n        }\r\n    `;\r\n    return {vertex, fragment};\r\n}\r\n\r\nexport const Shaders1 = () => {\r\n    const vertex = `\r\n        let pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\r\n            vec2<f32>(0.0, 0.5),\r\n            vec2<f32>(-0.5, -0.5),\r\n            vec2<f32>(0.5, -0.5)\r\n        );\r\n\r\n        let color : array<vec3<f32>, 3> = array<vec3<f32>, 3>(\r\n            vec3<f32>(1.0, 0.0, 0.0),\r\n            vec3<f32>(0.0, 1.0, 0.0),\r\n            vec3<f32>(0.0, 0.0, 1.0)\r\n        );\r\n\r\n        struct Output {\r\n            [[builtin(position)]] Position : vec4<f32>;\r\n            [[location(0)]] vColor : vec4<f32>;\r\n        };\r\n\r\n        [[stage(vertex)]]\r\n        fn main([[builtin(vertex_index)]] VertexIndex: u32) -> Output {\r\n            var output: Output;\r\n            output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\r\n            output.vColor = vec4<f32>(color[VertexIndex], 1.0);\r\n            return output;\r\n        }\r\n    `;\r\n\r\n    const fragment = `\r\n        [[stage(fragment)]]\r\n        fn main([[location(0)]] vColor: vec4<f32>) -> [[location(0)]] vec4<f32> {\r\n            return vColor;\r\n        }\r\n    `;\r\n    return {vertex, fragment};\r\n}\r\n\r\n\r\nexport const ShadersOld = () => {\r\n    const vertex = `\r\n        const pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\r\n            vec2<f32>(0.0, 0.5),\r\n            vec2<f32>(-0.5, -0.5),\r\n            vec2<f32>(0.5, -0.5)\r\n        );\r\n\r\n        const color : array<vec3<f32>, 3> = array<vec3<f32>, 3>(\r\n            vec3<f32>(1.0, 0.0, 0.0),\r\n            vec3<f32>(0.0, 1.0, 0.0),\r\n            vec3<f32>(0.0, 0.0, 1.0)\r\n        );\r\n\r\n        [[builtin(position)]] var<out> Position : vec4<f32>;\r\n        [[builtin(vertex_idx)]] var<in> VertexIndex : i32;\r\n        [[location(0)]] var<out> vColor : vec4<f32>;\r\n\r\n        [[stage(vertex)]]\r\n        fn main() -> void {\r\n            Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\r\n            vColor = vec4<f32>(color[VertexIndex], 1.0);\r\n            return;\r\n        }\r\n    `;\r\n\r\n    const fragment = `\r\n        [[location(0)]] var<in> vColor : vec4<f32>;\r\n        [[location(0)]] var<out> fragColor : vec4<f32>;\r\n\r\n        [[stage(fragment)]]\r\n        fn main() -> void {\r\n            fragColor = vColor;\r\n            return;\r\n        }\r\n    `;\r\n    return {vertex, fragment};\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"sourceRoot":""}